-- Supabase SQL schema for CoolCare AC Services
-- Run this in the SQL editor of your Supabase project

begin;

-- Table: public.bookings
create table if not exists public.bookings (
  id bigint generated by default as identity primary key,
  customer_name text not null,
  customer_phone text not null,
  customer_email text,
  service_type text not null check (service_type in ('repair','maintenance','rent')),
  ac_type text not null check (ac_type in ('window','split','central')),
  address text not null,
  preferred_date date not null,
  preferred_time text not null,
  notes text,
  status text not null default 'pending' check (status in ('pending','confirmed','completed','cancelled')),
  created_at timestamptz not null default now(),
  updated_at timestamptz
);

-- Helpful indexes
create index if not exists idx_bookings_created_at on public.bookings (created_at);
create index if not exists idx_bookings_status on public.bookings (status);
create index if not exists idx_bookings_preferred_date on public.bookings (preferred_date);

-- Keep updated_at fresh on updates
create or replace function public.set_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger bookings_set_updated_at
before update on public.bookings
for each row execute function public.set_updated_at();

-- Security: Enable RLS to prevent unintended access via anon key.
-- The application uses the service role for server-side access, which bypasses RLS.
alter table public.bookings enable row level security;

-- (Optional) If you ever want to allow public inserts directly from the client (not recommended here),
-- you could create a policy like below. By default with RLS enabled and no policies, no access is granted.
-- create policy "allow_public_insert_bookings"
--   on public.bookings
--   for insert
--   to anon
--   with check (true);

commit;
